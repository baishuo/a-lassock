#将本地properties文件合并到Config中
#值定义格式："log4j.properties;b.properties"以';'相隔
locations = "system.properties;"
#采集器(Lassock)系统配置
system {
  # 采集器名称(不设默认为"lassock")
  # 命名规则:[a-zA-Z0-9] plus non-leading '-' or '_';
  name: "lassock-lily"
  #本机ip或者hostname，如果没设置，则默认使用hostname
  host: "@<local.host>"
  # ip : "10.7.0.150"
  # mac : "FFFFFFFFFFFF"
  # 对外开放端口 默认为9981
  port: 9981
  # 附加信息添加，会在注册时传至注册服务器
  header {
  }
  auto.create.id: false
}
// 远程配置
remote {
}

#采集监控配置
monitor {
  enabled: true
  target: {
    enabled: true
    host: "@<remote.monitor.host>",
    port: "@<remote.monitor.port>",
    systemname: "lassockMonitor",
    registername: "register",
    monitorname: "intelligence"
    #period:5000
  }
}

#配置监听器
liveness {
  class: "com.aleiye.lassock.liveness.ZkLiveness"
  #class: "com.aleiye.lassock.liveness.FilePickLiveness"
  zkurl: "@<remote.zookeeper.url>"
  #coursefile: "template/course.json"
}
live: {
  baskets {
    #simple {
    #	class : "com.aleiye.lassock.live.basket.MemoryQueueBasket"
    #}
  }
  bazaars {
    #text {
    # class : "com.aleiye.lassock.live.bazaar.TextBazaar",
    #path : "/Users/qhl/work/testFile/telnetCollect"
    #},
    #logger.class : "com.aleiye.lassock.live.bazaar.LoggerBazaar"
    kafka {
      zkhost: "@<remote.zookeeper.url>"
      class: "com.aleiye.lassock.live.bazaar.KafkaBazaar"
    }
  }
}

#执行线程池
executor {
  size: 8,
  maxSize: 64,
  #毫秒
  keepAliveTime: 60000,
  queueSize: 3000
}

#标记类型
marker {
  enabled: true,
  class: "com.aleiye.lassock.live.mark.FileMarker",
  filePath: "temp/mark.ofs",
  period: 3000
}

data.storage {
  #M(only memory),D(only disk),MD(memory and disk),JDBC(only jdbc),MJDBC(memory and jdbc)
  level: "MD"
  disk.path: "./datacache"
  memory.queue {
    #unit(M)
    maxsize: 100
    maxcount: 10000
  }
}
#文件读取策略
file.read.policy {
  #unit(seconds)
  duration: 5
  maxcount: 3000
}

#
resource {
  read.file.thread.num: 5
}
#kafka的配置
kafka {
  serializer.class: "kafka.serializer.DefaultEncoder"
  key.serializer.class: "kafka.serializer.StringEncoder"
  request.required.acks: "1"
  producer.type: "async"
  queue {
    buffering.max.ms: "5000"
    buffering.max.messages: "10000"
    enqueue.timeout.ms: "-1"
  }
  batch.num.messages: "200"
  message.send.max.retries: "100"
  retry.backoff.ms: "3000"
  request.timeout.ms: "10000"
}

// AKKA系统配置
akka {
  daemonic = on
  loggers = [akka.event.slf4j.Slf4jLogger]
  stdout-loglevel = INFO
  actor.provider = akka.remote.RemoteActorRefProvider
  remote.netty.tcp.transport-class = akka.remote.transport.netty.NettyTransport
  remote.netty.tcp.hostname = "@<system.host>"
  remote.netty.tcp.port = "@<system.port>"
  remote.netty.tcp.tcp-nodelay = on
  akka.remote.secure-cookie = "aleiye4058859"
  akka.remote.require-cookie = on
}
